"""Задание 5.1
    Запросить у пользователя ввод IP-адреса в десятично-точечном формате.
    Определить какому классу принадлежит IP-адрес.
    В зависимости от класса адреса, вывести на стандартный поток вывода:
        'unicast' - если IP-адрес принадлежит классу A, B или C
        'multicast' - если IP-адрес принадлежит классу D
        'local broadcast' - если IP-адрес равен 255.255.255.255
        'unassigned' - если IP-адрес равен 0.0.0.0
        'unused' - во всех остальных случаях
Подсказка по классам (диапазон значений первого байта в десятичном формате):
    A: 1-127
    B: 128-191
    C: 192-223
    D: 224-239
"""

"""Задание 5.1a
Сделать копию скрипта задания 5.1.
Дополнить скрипт:
Добавить проверку введенного IP-адреса.
Адрес считается корректно заданным, если он:
состоит из 4 чисел разделенных точкой,
каждое число в диапазоне от 0 до 255.
Если адрес задан неправильно, выводить сообщение:
'Incorrect IPv4 address'
"""

"""Задание 5.1b
Сделать копию скрипта задания 5.1a.
Дополнить скрипт:
Если адрес был введен неправильно, запросить адрес снова.
"""

While True:
    
    proverka_ip = False
    
    While proverka_ip == False:
    
        #Вводим данные
        
        ip = raw_input('Введите IP-адрес в формае X.X.X.X: ')
        ip = ip.split('.')
        
        #Проверяем, что IP-адрес верный
        
        Try:    
        
            for i in ip:
                if int(i) < 0 or int(i) > 255 or len(ip) != 4:
                    print
                    print ('Incorrect IPv4 address\n')
                    break
                else:
                    proverka_ip = True
            
        Except ValueError:
            print
            print 'Incorrect IPv4 address\n'
            
    Else:
        
        #Выясняем класс IP-адреса и выводим результат
        
        print
        if int(ip[0]) > 0 and int(ip[0]) < 223:
            print 'unicast'
        elif int(ip[0]) > 222 and int(ip[0]) < 240:
            print 'multicast'
        elif int(ip[0]) == 255:
            broadcast = 0
            for i in ip:
                if int(i) == 255:
                    broadcast += 1
            if broadcast == 4:
                print 'local broadcast'
            else:
                print 'unused'
        elif int(ip[0]) == 0:
            unassigned = 0
            for i in ip:
                if int(i) == 0:
                    unassigned += 1
            if unassigned == 4:
                print 'unassigned'
            else:
                print 'unused'
        else:
            print 'unused'

"""Задание 5.2
Список mac содержит MAC-адреса в формате XXXX:XXXX:XXXX.
Однако, в оборудовании Cisco MAC-адреса используются в формате XXXX.XXXX.XXXX.
Создать скрипт, который преобразует MAC-адреса в формат cisco и добавляет их в новый список mac_cisco.
Усложненный вариант: сделать преобразование в одной строке скрипта.
mac = ['aabb:cc80:7000', 'aabb:dd80:7340', 'aabb:ee80:7000', 'aabb:ff80:7000']
mac_cisco = []
"""

mac = ['aabb:cc80:7000', 'aabb:dd80:7340', 'aabb:ee80:7000', 'aabb:ff80:7000']
mac_cisco = [str(i).replace(':','.') for i in mac] 
print mac_cisco

"""Задание 5.3
В скрипте сделан генератор конфигурации для access-портов.
Сделать аналогичный генератор конфигурации для портов trunk.
В транках ситуация усложняется тем, что VLANов может быть много, и надо понимать, что с ними делать.
Поэтому в соответствии каждому порту стоит список и первый (нулевой) элемент списка указывает как воспринимать номера VLAN, которые идут дальше:
add - значит VLANы надо будет добавить (команда switchport trunk allowed vlan add 10,20)
del - значит VLANы надо удалить из списка разрешенных (команда switchport trunk allowed vlan remove 17)
only - значит, что на интерфейсе должны остаться разрешенными только указанные VLANы (команда switchport trunk allowed vlan 11,30)
Задача для портов 0/1, 0/2, 0/4:
сгенерировать конфигурацию на основе шаблона trunk_template
с учетом ключевых слов add, del, only
"""

access_template = ['switchport mode access',
                   'switchport access vlan',
                   'spanning-tree portfast',
                   'spanning-tree bpduguard enable']

trunk_template = ['switchport trunk encapsulation dot1q',
                  'switchport mode trunk',
                  'switchport trunk allowed vlan']

fast_int = {'access':{'0/12':'10','0/14':'11','0/16':'17','0/17':'150'}, 
            'trunk':{'0/1':['add','10','20'],
                     '0/2':['only','11','30'],
                     '0/4':['del','17']} }

for int in fast_int['access']:
    print 'interface FastEthernet' + int
    for command in access_template:
        if command.endswith('access vlan'):
            print ' %s %s' % (command, fast_int['access'][int])
        else:
            print ' %s' % command
            

#Генерируем название интерфейса
for int in fast_int['trunk']:
    print 'interface FastEthernet' + int
      
    #Фильтруем конкретный интерфейс и что нужно на нем сделать
    for command in trunk_template:
        if command.endswith('switchport trunk allowed vlan'):
        
            for port, action in fast_int['trunk'].items():
                
                if port == int and 'add' in action:
                    print ' %s %s %s' % (command, str(action[0]), ','.join(action[1:]))
                if port == int and 'only' in action:
                    print ' %s %s' % (command, ','.join(action[1:]))
                if port == int and 'del' in action:
                    print ' %s remove %s' % (command, ','.join(action[1:]))
