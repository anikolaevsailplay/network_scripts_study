"""Задание 4.1
Запросить у пользователя ввод IP-сети в формате: 10.1.1.0/24
Затем вывести информацию о сети и маске в таком формате:
Network:
10        1         1         0
00001010  00000001  00000001  00000000
Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000
"""

while True:

#Вводим данные

    ip_and_mask = raw_input('Введите IP адрес в формате: X.X.X.X/Y\n')
    ip, mask = ip_and_mask.split('/')

#Проверяем верность введенных данных    
    
    #Проверяем IP
    proverka_ip = False
    ip = [int(i) for i in ip.split('.')]
    for i in ip:
        if i < 0 or i > 255 or len(ip) != 4:
            print
            print ('Неверный IP-адрес. Повторите ввод.\n')
            break
        else:
            proverka_ip = True
    
    #Проверяем маску
    proverka_mask = False
    mask = int(mask)
    if mask < 0 or mask > 32:
        print
        print ('Неверная маска. Повторите ввод.\n')    
    else:
        proverka_mask = True

#Выводим результат на экран
    
    if proverka_ip == True and proverka_mask == True:
        
        #Вывод блока сети
        print
        print('Network:')
        #Вывод списка из чисел в строке
        print(' '.join([str(a).ljust(8) for a in ip]))
        print(' '.join([ "{:08b}".format(int(c)) for c in ip]))
        
        #Вывод маски сети
        #Вычисляем бинарную маску подсети (32 бита = X-бит заполненных еденицами (/X - берем из короткой маски) + Y-бит заполненных нулями
        binar_mask = int(mask) * '1'
        binar_mask = binar_mask + ((32 - len(binar_mask)) * '0')
        print('\nMask:')
        print('/{}'.format(mask))
        print'{:<1}{:<15}{:<15}{:<20}'.format(int(binar_mask[:8],2),int(binar_mask[8:16],2),int(binar_mask[16:24],2),int(binar_mask[24:],2))
        print binar_mask[:8],binar_mask[8:16],binar_mask[16:24],binar_mask[24:]
        
        break

"""Задание 4.1a
Всё, как в задании 4.1. Но, если пользователь ввел адрес хоста, а не адрес сети, то надо адрес хоста преобразовать в адрес сети и вывести адрес сети и маску, как в задании 4.1.
Пример адреса сети (все биты хостовой части равны нулю):
10.0.1.0/24
190.1.0.0/16
Пример адреса хоста:
10.0.1.1/24 - хост из сети 10.0.1.0/24
10.0.5.1/30 - хост из сети 10.0.5.0/30
Network:
10        1         1         0
00001010  00000001  00000001  00000000
Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000
Проверить работу скрипта на разных комбинациях сеть/маска.
"""

while True:

#Вводим данные

    ip_and_mask = raw_input('Введите IP адрес в формате: X.X.X.X/Y\n')
    ip, mask = ip_and_mask.split('/')

#Проверяем верность введенных данных    
    
    #Проверяем IP
    proverka_ip = False
    ip = [int(i) for i in ip.split('.')]
    for i in ip:
        if i < 0 or i > 255 or len(ip) != 4:
            print
            print ('Неверный IP-адрес. Повторите ввод.\n')
            break
        else:
            proverka_ip = True
    
    #Проверяем маску
    proverka_mask = False
    mask = int(mask)
    if mask < 0 or mask > 32:
        print
        print ('Неверная маска. Повторите ввод.\n')    
    else:
        proverka_mask = True

    if proverka_ip == True and proverka_mask == True:
        
#Преобразуем адрес хоста в адрес сети

	#Вычисляем бинарную маску подсети (32 бита = X-бит заполненных еденицами (/X - берем из короткой маски) + Y-бит заполненных нулями
        binar_mask = int(mask) * '1'
        binar_mask = binar_mask + ((32 - len(binar_mask)) * '0')
        
        #Записываем короткую маску для последующего вывода
        short_mask = str(mask)
        
	#Вычисляем десятичную маску в обычном виде X.X.X.X
        mask = [int(binar_mask[:8],2), int(binar_mask[8:16],2), int(binar_mask[16:24],2), int(binar_mask[24:],2)]
		
        network = []
		
	#Получаем адрес сети
        for a, b in enumerate(mask):
		    network.append(ip[a] & b)
		
#Выводим результат на экран
        
        #Вывод блока сети
        print
        print('Network:')
        print(' '.join([str(x).ljust(8) for x in network]))
        print(' '.join([ "{:08b}".format(int(y)) for y in network]))
        
        #Вывод маски
        print
        print('Mask:')
        print('/{}'.format(short_mask))
        print(' '.join([str(x).ljust(8) for x in mask]))
        print(' '.join([ "{:08b}".format(int(y)) for y in mask]))        
        
        break

"""Задание 4.1b
Преобразовать скрипт из задания 4.1a таким образом, чтобы сеть/маска не запрашивались у пользователя, а передавались как аргумент скрипту.
"""

from sys import argv

while True:

#Вводим данные
     
    ip_and_mask = argv[1:]
    print('{:<1}'.format(ip_and_mask))
    ip, mask = ip_and_mask.split('/')

#Проверяем верность введенных данных    
    
    #Проверяем IP
    proverka_ip = False
    ip = [int(i) for i in ip.split('.')]
    for i in ip:
        if i < 0 or i > 255 or len(ip) != 4:
            print
            print ('Неверный IP-адрес. Повторите ввод.\n')
            break
        else:
            proverka_ip = True
    
    #Проверяем маску
    proverka_mask = False
    mask = int(mask)
    if mask < 0 or mask > 32:
        print
        print ('Неверная маска. Повторите ввод.\n')    
    else:
        proverka_mask = True

    if proverka_ip == True and proverka_mask == True:
        
#Преобразуем адрес хоста в адрес сети

		#Вычисляем бинарную маску подсети (32 бита = X-бит заполненных еденицами (/X - берем из короткой маски) + Y-бит заполненных нулями
        binar_mask = int(mask) * '1'
        binar_mask = binar_mask + ((32 - len(binar_mask)) * '0')
        
        #Записываем короткую маску для последующего вывода
        short_mask = str(mask)
        
		#Вычисляем десятичную маску в обычном виде X.X.X.X
        mask = [int(binar_mask[:8],2), int(binar_mask[8:16],2), int(binar_mask[16:24],2), int(binar_mask[24:],2)]
		
        network = []
		
		#Получаем адрес сети
        for a, b in enumerate(mask):
		    network.append(ip[a] & b)
		
#Выводим результат на экран
        
        #Вывод блока сети
        print
        print('Network:')
        print(' '.join([str(x).ljust(8) for x in network]))
        print(' '.join([ "{:08b}".format(int(y)) for y in network]))
        
        #Вывод маски
        print
        print('Mask:')
        print('/{}'.format(short_mask))
        print(' '.join([str(x).ljust(8) for x in mask]))
        print(' '.join([ "{:08b}".format(int(y)) for y in mask]))        
        
        break
#______________________________________________________________________________________________________________________________________

"""Задание 4.2
В этой задаче нельзя использовать условие if и нельзя изменять словарь london_co.
В задании создан словарь с информацией о разных устройствах.
Вам нужно запросить у пользователя ввод имени устройства (r1, r2 или sw1). И вывести информацию о соответствующем устройстве на стандартный поток вывода (информация будет в виде словаря).
"""

london_co = {
    'r1' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '4451',
    'ios': '15.4',
    'ip': '10.255.0.1'
    },
    'r2' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '4451',
    'ios': '15.4',
    'ip': '10.255.0.2'
    },
    'sw1' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '3850',
    'ios': '3.6.XE',
    'ip': '10.255.0.101',
    'vlans': '10,20,30',
    'routing': True
    }
}

#Вводим данные

device = raw_input('Имя устройства:\n')

#Выводим нужный словарь

print
print london_co.get(device,'Такого устройства не существует')

"""Задание 4.2a
В этой задаче нельзя использовать условие if и нельзя изменять словарь london_co.
Переделать скрипт из задания 4.2 таким образом, чтобы, кроме имени устройства, запрашивался также параметр устройства, который нужно отобразить.
Вывести информацию о соответствующем параметре, указанного устройства.
Пример выполнения скрипта:
$ python task_4_2a.py
Enter device name: r1
Enter parameter name: ios
15.4
"""

london_co = {
    'r1' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '4451',
    'ios': '15.4',
    'ip': '10.255.0.1'
    },
    'r2' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '4451',
    'ios': '15.4',
    'ip': '10.255.0.2'
    },
    'sw1' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '3850',
    'ios': '3.6.XE',
    'ip': '10.255.0.101',
    'vlans': '10,20,30',
    'routing': True
    }
}

#Вводим данные

device = raw_input('Имя устройства:\n')
print
parameter = raw_input('Параметр:\n')
    
#Выводим нужный словарь

print(london_co[device][parameter])

"""Задание 4.2b
В этой задаче нельзя использовать условие if и нельзя изменять словарь london_co.
Переделать скрипт из задания 4.2a таким образом, чтобы, при запросе параметра, отображался список возможных параметров.
Вывести информацию о соответствующем параметре, указанного устройства.
Пример выполнения скрипта:
$ python task_4_2b.py
Enter device name: r1
Enter parameter name (ios,model,vendor,location,ip): ip
10.255.0.1
"""

london_co = {
    'r1' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '4451',
    'ios': '15.4',
    'ip': '10.255.0.1'
    },
    'r2' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '4451',
    'ios': '15.4',
    'ip': '10.255.0.2'
    },
    'sw1' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '3850',
    'ios': '3.6.XE',
    'ip': '10.255.0.101',
    'vlans': '10,20,30',
    'routing': True
    }
}

#Вводим данные

device = raw_input('Имя устройства:')
print 'Параметр (',','.join(london_co[device].keys()),'):',
parameter = raw_input()
    
#Выводим нужный словарь

print(london_co[device][parameter])


"""Задание 4.2c
В этой задаче нельзя использовать условие if и нельзя изменять словарь london_co.
Переделать скрипт из задания 4.2b таким образом, чтобы, при запросе параметра, которого нет в словаре устройства, отображалось сообщение 'Такого параметра нет'.
Попробуйте набрать неправильное име параметра или несуществующий параметр, чтобы увидеть какой будет результат. А затем выполняйте задание.
Если выбран существующий параметр, вывести информацию о соответствующем параметре, указанного устройства.
Пример выполнения скрипта:
$ python task_4_2c.py
Enter device name: r1
Enter parameter name (ios,model,vendor,location,ip): io
Такого параметра нет
"""

london_co = {
    'r1' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '4451',
    'ios': '15.4',
    'ip': '10.255.0.1'
    },
    'r2' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '4451',
    'ios': '15.4',
    'ip': '10.255.0.2'
    },
    'sw1' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '3850',
    'ios': '3.6.XE',
    'ip': '10.255.0.101',
    'vlans': '10,20,30',
    'routing': True
    }
}

#Вводим данные

device = raw_input('Имя устройства:')
print 'Параметр (', ','.join(london_co[device].keys()), '):',
parameter = raw_input()
    
#Выводим нужный словарь

print(london_co[device].get(parameter, 'Такого параметра нет')

"""Задание 4.2d
В этой задаче нельзя использовать условие if и нельзя изменять словарь london_co.
Переделать скрипт из задания 4.2c таким образом, чтобы, при запросе параметра, пользователь мог вводить название параметра в любом регистре.
Пример выполнения скрипта:
$ python task_4_2d.py
Enter device name: r1
Enter parameter name (ios,model,vendor,location,ip): IOS
15.4
"""

london_co = {
    'r1' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '4451',
    'ios': '15.4',
    'ip': '10.255.0.1'
    },
    'r2' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '4451',
    'ios': '15.4',
    'ip': '10.255.0.2'
    },
    'sw1' : {
    'location': '21 New Globe Walk',
    'vendor': 'Cisco',
    'model': '3850',
    'ios': '3.6.XE',
    'ip': '10.255.0.101',
    'vlans': '10,20,30',
    'routing': True
    }
}

#Вводим данные

device = raw_input('Имя устройства:')
print 'Параметр (', ','.join(london_co[device].keys()), '):',
parameter = raw_input()
    
#Выводим нужный словарь

print london_co[device].get(parameter.lower(), 'Такого параметра нет')

#______________________________________________________________________________________________________________________________________

"""Задание 4.3
(Задача на основе примеров в разделе)
В этой задаче нельзя использовать условие if.
Скрипт должен запрашивать у пользователя:
информацию о режиме интерфейса (access/trunk),
пример текста запроса: 'Enter interface mode (access/trunk): '
номере интерфейса (тип и номер, вида Gi0/3)
пример текста запроса: 'Enter interface type and number: '
номер VLANа (для режима trunk будет вводиться список VLANов)
пример текста запроса: 'Enter vlan(s): '
В зависимости от выбранного режима, на стандартный поток вывода, должна возвращаться соответствующая конфигурация access или trunk (шаблоны команд находятся в списках access_template и trunk_template).
При этом, сначала должна идти строка interface и подставлен номер интерфейса, а затем соответствующий шаблон, в который подставлен номер VLANа (или список VLANов).
"""

access_template = ['switchport mode access',
                   'switchport access vlan %s',
                   'switchport nonegotiate',
                   'spanning-tree portfast',
                   'spanning-tree bpduguard enable']

trunk_template = ['switchport trunk encapsulation dot1q',
                  'switchport mode trunk',
                  'switchport trunk allowed vlan %s']

#Вводим данные

mode = raw_input('Enter interface mode (access/trunk):')
interface = raw_input('Enter interface type and number:')
vlan = raw_input('Enter vlan(s):')

#Создаем словарь для выбора вариантов

template = {'access':access_template, 'trunk':trunk_template}

#Генерируем конфигу

print 'Interface', interface
print '\n'.join(template[mode]) % vlan

"""Задание 4.3a
В этой задаче нельзя использовать условие if.
Дополнить скрипт из задания 4.3 таким образом, чтобы, в зависимости от выбранного режима, задавались разные вопросы в запросе о номере VLANа или списка VLANов:
для access: 'Enter VLAN number:'
для trunk: 'Enter allowed VLANs:'
"""
