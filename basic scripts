"""Задание 4.1
Запросить у пользователя ввод IP-сети в формате: 10.1.1.0/24
Затем вывести информацию о сети и маске в таком формате:
Network:
10        1         1         0
00001010  00000001  00000001  00000000
Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000
"""

while True:

#Вводим данные

    ip_and_mask = raw_input('Введите IP адрес в формате: X.X.X.X/Y\n')
    ip, mask = ip_and_mask.split('/')

#Проверяем верность введенных данных    
    
    #Проверяем IP
    proverka_ip = False
    ip = [int(i) for i in ip.split('.')]
    for i in ip:
        if i < 0 or i > 255 or len(ip) != 4:
            print
            print ('Неверный IP-адрес. Повторите ввод.\n')
            break
        else:
            proverka_ip = True
    
    #Проверяем маску
    proverka_mask = False
    mask = int(mask)
    if mask < 0 or mask > 32:
        print
        print ('Неверная маска. Повторите ввод.\n')    
    else:
        proverka_mask = True

#Выводим результат на экран
    
    if proverka_ip == True and proverka_mask == True:
        
        #Вывод блока сети
        print
        print('Network:')
        #Вывод списка из чисел в строке
        print(' '.join([str(a).ljust(8) for a in ip]))
        print(' '.join([ "{:08b}".format(int(c)) for c in ip]))
        
        #Вывод маски сети
        #Вычисляем бинарную маску подсети (32 бита = X-бит заполненных еденицами (/X - берем из короткой маски) + Y-бит заполненных нулями
        binar_mask = int(mask) * '1'
        binar_mask = binar_mask + ((32 - len(binar_mask)) * '0')
        print('\nMask:')
        print('/{}'.format(mask))
        print'{:<1}{:<15}{:<15}{:<20}'.format(int(binar_mask[:8],2),int(binar_mask[8:16],2),int(binar_mask[16:24],2),int(binar_mask[24:],2))
        print binar_mask[:8],binar_mask[8:16],binar_mask[16:24],binar_mask[24:]
        
        break

"""Задание 4.1a
Всё, как в задании 4.1. Но, если пользователь ввел адрес хоста, а не адрес сети, то надо адрес хоста преобразовать в адрес сети и вывести адрес сети и маску, как в задании 4.1.
Пример адреса сети (все биты хостовой части равны нулю):
10.0.1.0/24
190.1.0.0/16
Пример адреса хоста:
10.0.1.1/24 - хост из сети 10.0.1.0/24
10.0.5.1/30 - хост из сети 10.0.5.0/30
Network:
10        1         1         0
00001010  00000001  00000001  00000000
Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000
Проверить работу скрипта на разных комбинациях сеть/маска.
"""

while True:

#Вводим данные

    ip_and_mask = raw_input('Введите IP адрес в формате: X.X.X.X/Y\n')
    ip, mask = ip_and_mask.split('/')

#Проверяем верность введенных данных    
    
    #Проверяем IP
    proverka_ip = False
    ip = [int(i) for i in ip.split('.')]
    for i in ip:
        if i < 0 or i > 255 or len(ip) != 4:
            print
            print ('Неверный IP-адрес. Повторите ввод.\n')
            break
        else:
            proverka_ip = True
    
    #Проверяем маску
    proverka_mask = False
    mask = int(mask)
    if mask < 0 or mask > 32:
        print
        print ('Неверная маска. Повторите ввод.\n')    
    else:
        proverka_mask = True

    if proverka_ip == True and proverka_mask == True:
        
#Преобразуем адрес хоста в адрес сети

		#Вычисляем бинарную маску подсети (32 бита = X-бит заполненных еденицами (/X - берем из короткой маски) + Y-бит заполненных нулями
        binar_mask = int(mask) * '1'
        binar_mask = binar_mask + ((32 - len(binar_mask)) * '0')
        
        #Записываем короткую маску для последующего вывода
        short_mask = str(mask)
        
		#Вычисляем десятичную маску в обычном виде X.X.X.X
        mask = [int(binar_mask[:8],2), int(binar_mask[8:16],2), int(binar_mask[16:24],2), int(binar_mask[24:],2)]
		
        network = []
		
		#Получаем адрес сети
        for a, b in enumerate(mask):
		    network.append(ip[a] & b)
		
#Выводим результат на экран
        
        #Вывод блока сети
        print
        print('Network:')
        print(' '.join([str(x).ljust(8) for x in network]))
        print(' '.join([ "{:08b}".format(int(y)) for y in network]))
        
        #Вывод маски
        print
        print('Mask:')
        print('/{}'.format(short_mask))
        print(' '.join([str(x).ljust(8) for x in mask]))
        print(' '.join([ "{:08b}".format(int(y)) for y in mask]))        
        
        break
